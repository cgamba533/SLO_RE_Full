# -*- coding: utf-8 -*-
"""SLO_RE_Deployment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mVaYbLhnCF8qSqxE0Nu6l-VcNg86sLBw
"""

import pandas as pd
import numpy as np
import joblib

from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.pipeline import make_pipeline, Pipeline
from sklearn.compose import make_column_transformer

slo_re = pd.read_excel(r'C:\Users\conno\OneDrive\Desktop\python_deployment_test\SLO_RE_Clean.xlsx')

slo_re_anova = slo_re.dropna(subset=['Lot Size', 'Latitude', 'Longitude', 'Year Built', 'New Construction', 'Attached Garage',
                                     'Stories', 'Garage Spaces', 'HOA Fee', 'Lot Size', 'Square Footage', 'Baths', 'Beds',
                                     'Structure Type', 'List Price', 'Days On Market'])

def days_mkt_category_binary(days):
  if days <= 45:
    return 'average'
  else:
    return 'slow'

slo_re_anova['Days Mkt Category Binary'] = slo_re_anova['Days On Market'].apply(days_mkt_category_binary)

X = slo_re_anova[['Lot Size', 'List Price', 'Baths', 'Structure Type', 'Beds', 'Square Footage', 'HOA Fee', 'Stories', 'Attached Garage', 'New Construction']]
y = slo_re_anova['Days Mkt Category Binary']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=42)

# Define the column transformer and pipeline
ct = make_column_transformer(
    (StandardScaler(), ['Lot Size', 'List Price', 'Square Footage', 'HOA Fee']),  # Scale numerical features
    (OneHotEncoder(handle_unknown="ignore"), ['Baths', 'Structure Type', 'Beds', 'Stories', 'Attached Garage', 'New Construction']),  # Encode categorical features
    remainder="passthrough"
)

pipeline = make_pipeline(
    ct,
    RandomForestClassifier(n_estimators= 55, random_state=42)  # Random Forest model with default parameters
)


class_RFModel = pipeline.fit(X=X_train,
             y=y_train)

joblib.dump(class_RFModel, 'model.pkl')